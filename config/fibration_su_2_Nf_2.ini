# Mose Configuration File.
# WARNING: This file is not a Python code, but will be interpreted by Python's 
# ConfigParser module.
# WARNING: option names are not case-sensitive, use lowercases only. 

[fibration]
# u is the coordinate of the base space.
f = - (l ** 4) / 64.0 + (1.0/4.0) * (l**2) * m_1 * m_2 - (u ** 2) / 3.0
g = (1.0 / 12.0) * (l ** 2) * m_1 * m_2 * u - 2.0 * (u ** 3) / 27.0 + (l ** 4) * u / 96.0 - (1.0 / 64.0) * (l ** 4) * ((m_1 ** 2) + (m_2 ** 2))

[fibration parameters]
# when defining a variable here, i.e. A = value,
# refer to it in a different location as %(A)s.
# m_1 = 1.0
# m_2 = -2.0j
# l = 1.0
#Bilal-Ferrari's setup with m_1=m_2=m<lambda/2
#m_1 = 1.0+1.0j
#m_2 = 1.0-1.0j
#l = 3.0
m_1 = 1.0
m_2 = 1.0
l = 5.0



[ODE]
# The following parameter controls what value of abs(det(pf_matrix)) wilL
# raise an exception to determine that a singularity ran too close to a 
# singularity, and should be dropped.
trajectory_singularity_threshold = 10**6 
size_of_step= 1e-1
num_steps = 300

[KSWCF]
filtration_degree = 5
dsz_matrix = [[0, -1], [1, 0]]

[plotting]
range = [[-10, 10], [-10, 10]]

[intersection search]
# Size of a bin for the coarse-graining of the intersection module
bin_size = 0.2 

[K-wall network]
# Number of iterations to construct additional K-walls
n_iterations = 2

[MS wall]
# Range of the phases of K-wall network to construct 
# in order to construct walls of marginal stability
theta_range = [0, pi, 10]

[file IO]
# Options for saving to files
# Available options: 0, 1, 2 (up to python 2.7.8)
pickle_protocol = 0

[multiprocessing]
# set 0 to use all available cores, 
# otherwise set the number of processes to run in parallel.
n_processes = 0
