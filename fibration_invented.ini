# Mose Configuration File.
# WARNING: This file is not a Python code, but will be interpreted by Python's 
# ConfigParser module.
# WARNING: option names are not case-sensitive, use lowercases only. 

[fibration]
# u is the coordinate of the base space.
# when defining a variable here, i.e. A = value,
# refer to it in a different location as %(A)s.
Lambda = 1.0
m = 0.5 + 1j

g2 = ((16 * %(m)s**2) / 3 - 12 * u / 3) / %(Lambda)s**2
g3 = ((8 * %(m)s * u) / %(Lambda)s**3 - 
      (64 * %(m)s**3) / (27 * %(Lambda)s**3) - 4)

[charge]
### Giving by hand the charges at branch points, 
### must update with algorithm that determines actual charge at branch-point
fixed_charges = [ [1, 0, 0], [0, 1, 0], [0, 0, 1] ] 

dsz_matrix = [[0, 1, -1], [-1, 0, 1], [1, -1, 0]]


[ODE]
# Range options for differential equation solver, odeint(): 
# [initial time, final time, number of steps]
primary_k_wall_odeint_range = [0.0, 0.5, 50]
odeint_range = [0.0, 20.0, 250]

# The following parameter controls what value of abs(det(pf_matrix)) wilL
# raise an exception to determine that a singularity ran too close to a 
# singularity, and should be dropped.
trajectory_singularity_threshold = 10**6 

pf_odeint_mxstep = 5000000

[KSWCF]
filtration_degree = 4

[plotting]
range = [[-10, 10], [-10, 10]]

[intersection search]
# Size of a bin for the coarse-graining of the intersection module
bin_size = .3 

[branch cut]
### the angle at which branch-cuts should be oriented
theta = 3.14159265359 / 2  

# how far way from the singularity the locus of the branch cut extends
cutoff = 10.0         

[K-wall network]
# Number of iterations to construct additional K-walls
n_iterations = 1

[MS wall]
# Range of the phases of K-wall network to construct 
# in order to construct walls of marginal stability
theta_range = [0, pi, 10]

[file IO]
# Options for saving to files
# Available options: 0, 1, 2 (up to python 2.7.8)
pickle_protocol = 0
